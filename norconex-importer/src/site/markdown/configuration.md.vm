#*
 Copyright 2010-2014 Norconex Inc.
 
 This file is part of Norconex Importer.
 
 Norconex Importer is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 Norconex Importer is distributed in the hope that it will be useful, 
 but WITHOUT ANY WARRANTY; without even the implied warranty of 
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with Norconex Importer. If not, see <http://www.gnu.org/licenses/>.
*#
#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')
#set($docpath = "./apidocs/com/norconex/importer")
<head><title>Configuration</title><meta name="Author" content="Norconex Inc." /></head>


$h1 Configuration

While Norconex Importer works out-of-the-box with its default settings, 
you will only unlock its full potential if you take time to configure it
properly using Java or XML.   

Refer to the following for an XML based configuration. 
Entries with a "class" attribute are expecting an implementation
of your choice.   The importer API offers several concrete implementations
already.  Developers can also create their own
by implementing the proper Java interfaces. Refer to the  
[Importer JavaDoc](./apidocs/index.html) 
and/or see further down what interfaces you can implement to provide custom 
functionality. Got to the 
[Extend the Importer](./usage.html#Extend_the_Importer) section 
for more details on adding your own implementations.
  
	<importer>
	
	    <preParseHandlers>
	        <tagger class="..." />
	        <transformer class="..." />
	        <filter class="..." />
	    </preParseHandlers>
	
	    <documentParserFactory class="..." />
	
	    <postParseHandlers>
	        <tagger class="..." />
	        <transformer class="..." />
	        <filter class="..." />
	    </postParseHandlers>
	
	</importer>

The table below only list the class or interface name.  
They are all optional.  In the
configuration file, **you have to use the fully qualified name**, as defined
in the Javadoc.  Click on a class or interface name to go directly to its
full documentation, giving extra configuration options.

<table>
 <thead>
  <tr>
   <th>Tag</th>
   <th>Description</th>
   <th>Classes</th>
   <th>Interface</th>
  </tr>
 </thead>
 <tbody>
   <tr>
     <td><code>documentParserFactory</code></td>
     <td>Factory dictating which document parser to use content types encountered.</td>
     <td><a href="$docpath/parser/DefaultDocumentParserFactory.html">DefaultDocumentParserFactory</a> (Default)</td>
     <td><a href="$docpath/parser/IDocumentParserFactory.html">IDocumentParserFactory</a></td>
   </tr>
   <tr>
     <td><code>tagger</code></td>
     <td>Taggers allow to add to or modify existing document metadata.</td>
     <td>
       <a href="$docpath/tagger/impl/ConstantTagger.html">ConstantTagger</a>, 
       <a href="$docpath/tagger/impl/CopyTagger.html">CopyTagger</a>, 
       <a href="$docpath/tagger/impl/DeleteTagger.html">DeleteTagger</a>,
       <a href="$docpath/tagger/impl/ForceSingleValueTagger.html">ForceSingleValueTagger</a>,
       <a href="$docpath/tagger/impl/HierarchyTagger.html">HierarchyTagger</a>, 
       <a href="$docpath/tagger/impl/KeepOnlyTagger.html">KeepOnlyTagger</a>,
       <a href="$docpath/tagger/impl/RenameTagger.html">RenameTagger</a>,
       <a href="$docpath/tagger/impl/ReplaceTagger.html">ReplaceTagger</a>, 
       <a href="$docpath/tagger/impl/TextBetweenTagger.html">TextBetweenTagger</a>
     </td>
     <td><a href="$docpath/tagger/IDocumentTagger.html">IDocumentTagger</a></td>
   </tr>
   <tr>
     <td><code>transformer</code></td>
     <td>Transformers allow to manipulate and convert extracted text and save the modified text back.</td>
     <td>
       <a href="$docpath/transformer/impl/StripBetweenTransformer.html">StripBetweenTransformer</a>,
       <a href="$docpath/transformer/impl/StripBeforeTransformer.html">StripBeforeTransformer</a>,
       <a href="$docpath/transformer/impl/StripAfterTransformer.html">StripAfterTransformer</a>,
       <a href="$docpath/transformer/impl/ReduceConsecutivesTransformer.html">ReduceConsecutivesTransformer</a>,
       <a href="$docpath/transformer/impl/ReplaceTransformer.html">ReplaceTransformer</a>
     </td>
     <td><a href="$docpath/transformer/IDocumentTransformer.html">IDocumentTransformer</a></td>
   </tr>
   <tr>
     <td><code>filter</code></td>
     <td>Allows to filter out certain incoming documents.</td>
     <td>
       <a href="$docpath/filter/impl/RegexMetadataFilter.html">RegexMetadataFilter</a>,
       <a href="$docpath/filter/impl/EmptyMetadataFilter.html">EmptyMetadataFilter</a>
     </td>
     <td><a href="$docpath/filter/IDocumentFilter.html">IDocumentFilter</a></td>
   </tr>
 </tbody>
</table>

$h2 Example

Pretend you are building a service that offers content extracted from 
documents of various nature.   You have a special batch that you want your 
system to treat as "News" documents.   You want to add a metadata value to 
each of these documents to mark them as such. You also noticed that some of 
these documents are HTML files with two "title" meta tags, and you want to 
keep only the first one encountered to avoid possible issues.  The following 
will accomplish this for you:

	<importer>
	
	    <postParseHandlers>
	        <tagger class="com.norconex.importer.tagger.impl.ConstantTagger">
	            <constant name="doctype">News</constant>
	        </tagger>
	        <tagger class="com.norconex.importer.tagger.impl.SingleValueTagger">
	            <singleValue field="title" action="keepFirst"/>
	        </tagger>
	    </postParseHandlers>
	
	</importer>

$h2 More Options 

There is a lot more you can do to structure your configuration files
the way you like.  Refer to this 
[additional documentation](../commons-lang/apidocs/com/norconex/commons/lang/config/ConfigurationLoader.html)
for more configuration options such as creating reusable 
configuration fragments and using variables to make your file easier 
to maintain and more portable across different environments.
 