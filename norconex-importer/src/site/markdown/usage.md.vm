#*
 Copyright 2010-2014 Norconex Inc.
 
 This file is part of Norconex Importer.
 
 Norconex Importer is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 Norconex Importer is distributed in the hope that it will be useful, 
 but WITHOUT ANY WARRANTY; without even the implied warranty of 
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with Norconex Importer. If not, see <http://www.gnu.org/licenses/>.
*#
#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')
<head><title>Usage</title><meta name="Author" content="Norconex Inc." /></head> 

$h1 Usage

Use the java importer as a command-line application or java library.

$h2 Command line

    usage: importer[.bat|.sh]
     -c,--config <arg>        Optional: Importer XML configuration file.
     -i,--inputFile <arg>     Required: File to be imported.
     -o,--outputFile <arg>    Optional: File where the imported content will
                              be stored.
     -r,--reference <arg>     Optional: Alternate unique qualifier for the
                              input file (e.g. URL).
     -t,--contentType <arg>   Optional: The MIME Content-type of the input
                              file.

$h2 Java

Add the Importer JAR and dependant libraries to your application classpath.
It is recommended you configure the 
[Importer](./apidocs/com/norconex/importer/Importer.html) class, by passing it a 
[ImporterConfig](./apidocs/com/norconex/importer/ImporterConfig.html).
You can build the configuration using java, or by loading an XML file using the 
[ImporterConfigLoader](./apidocs/com/norconex/importer/ImporterConfigLoader.html)
class. Below is a sample code usage:

	/* XML configuration: */
	//ImporterConfig config = ImporterConfigLoader.loadImporterConfig(
	//    myXMLFile, myVariableFile);
	
	/* Java configuration: */
	ImporterConfig config = new ImporterConfig();
	config.setsetTaggers(new IDocumentTagger[]{/* taggers here */});
	config.setTransformers(new IDocumentTransformer[] {/* transformers here */});
	config.setFilters(new IDocumentFilter[]{/* taggers here */});
	
	Importer importer = new Importer(config);
	
	File inputFile = ... // the file to be converted
	File outputFile = ... // the file that will contain the extracted text
	Metadata metadata = new Metadata();
	boolean accepted = importer.importDocument(inputFile, outputFile, metadata);
	if (accepted) {
	    System.out.println("File was imported to : " + outputFile);
	} else {
	    System.out.println("File was rejected.");
	}

Refer to the [Importer Javadoc](./apidocs/index.html) for more 
documentation or the [Configuration](./configuration.html) page for the 
XML configuration options.

$h2 Extend the Importer

Setting up your environment to develop your own feature implementations
for your importer installation is relatively easy.
  
Maven users can easily add the necessary [pom.xml](./download.html) 
information to have all dependencies automatically resolved.  
  
For other developers or if you want to extend the importer with your local
installation without downloading anything extra, create a new Java project 
in your favourite IDE. Add to your classpath all the files contained 
in the "lib"  folder of the Importer installation.  
Configure your project to have its binary output directory to be the 
"classes" folder of your importer
installation. Automatically, code created and stored under "classes" will 
be picked up by the Importer when run.


